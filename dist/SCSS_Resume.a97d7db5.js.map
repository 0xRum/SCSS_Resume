{"mappings":"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","sources":["<anon>","src/scripts/main.ts"],"sourcesContent":["var $1ccc8d3c866b7484$exports = {};\nclass $1ccc8d3c866b7484$var$PortfolioApp {\n    constructor(){\n        this.isDarkMode = false;\n        this.isMobileMenuOpen = false;\n        this.projects = [\n            {\n                name: \"Dungeon Dive\",\n                description: \"This is a simple dungeon crawler game made with C programming language where the player can navigate through a randomly generated dungeon after entering their username and dungeon size.\",\n                githubUrl: \"https://github.com/0xRum/dungeon-dive\"\n            },\n            {\n                name: \"Taskii\",\n                description: \"A modern and efficient task management application built with Flutter. Taskii helps you organize, prioritize, and track your tasks seamlessly, whether you're managing personal to-dos or team projects.\",\n                githubUrl: \"https://github.com/vasu-patel-123/Team-HamburgerHelpers-final-Project/tree/main/taskii\"\n            }\n        ];\n        this.initializeApp();\n    }\n    initializeApp() {\n        // Theme initialization\n        const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n        const storedTheme = localStorage.getItem(\"theme\") || (prefersDark ? \"dark\" : \"light\");\n        document.documentElement.setAttribute(\"data-theme\", storedTheme);\n        // Event listeners for theme toggle\n        const toggleTheme = ()=>{\n            const newTheme = document.documentElement.getAttribute(\"data-theme\") === \"dark\" ? \"light\" : \"dark\";\n            document.documentElement.setAttribute(\"data-theme\", newTheme);\n            localStorage.setItem(\"theme\", newTheme);\n        };\n        document.querySelectorAll(\".theme-toggle, .theme-toggle-mobile\").forEach((btn)=>btn.addEventListener(\"click\", toggleTheme));\n        // Smooth scroll\n        document.querySelectorAll('a[href^=\"#\"]').forEach((anchor)=>anchor.addEventListener(\"click\", (e)=>{\n                e.preventDefault();\n                const target = document.querySelector(e.target.getAttribute(\"href\") || \"\");\n                target?.scrollIntoView({\n                    behavior: \"smooth\"\n                });\n            }));\n        // Projects loading\n        if (window.location.pathname.endsWith(\"index.html\") || window.location.pathname === \"/\") {\n            const projectsGrid = document.querySelector(\".projects-grid\");\n            if (projectsGrid) this.projects.forEach((project)=>{\n                const card = document.createElement(\"div\");\n                card.className = \"project-card\";\n                card.innerHTML = `\n            <div class=\"card-header\">\n              <h3>${project.name}</h3>\n            </div>\n            <p>${project.description}</p>\n            <a href=\"${project.githubUrl}\" target=\"_blank\" rel=\"noopener noreferrer\">\n              View on GitHub\n              <i class=\"fab fa-github\"></i>\n            </a>\n          `;\n                projectsGrid.appendChild(card);\n            });\n        }\n        // Intersection observer for animations\n        const observer = new IntersectionObserver((entries)=>entries.forEach((entry)=>entry.isIntersecting && entry.target.classList.add(\"visible\")), {\n            threshold: 0.1\n        });\n        document.querySelectorAll(\"section\").forEach((section)=>observer.observe(section));\n        // Mobile menu\n        const mobileMenu = document.querySelector(\".mobile-menu\");\n        const menuToggle = document.querySelector(\".menu-toggle\");\n        const closeMenu = document.querySelector(\".close-menu\");\n        const mobileMenuLinks = document.querySelectorAll(\".mobile-nav a\");\n        if (menuToggle && closeMenu && mobileMenu) {\n            const toggleMenu = (open)=>{\n                this.isMobileMenuOpen = open;\n                mobileMenu.classList.toggle(\"active\", open);\n                menuToggle.style.display = open ? \"none\" : \"block\";\n                document.body.style.overflow = open ? \"hidden\" : \"\";\n            };\n            menuToggle.addEventListener(\"click\", ()=>toggleMenu(true));\n            closeMenu.addEventListener(\"click\", ()=>toggleMenu(false));\n            mobileMenuLinks.forEach((link)=>link.addEventListener(\"click\", ()=>toggleMenu(false)));\n        }\n        // Skills carousel\n        const carousel = document.querySelector(\".skills-carousel\");\n        if (carousel) {\n            const skillsScroll = carousel.querySelector(\".skills-scroll\");\n            const prevButton = carousel.querySelector(\".carousel-control.prev\");\n            const nextButton = carousel.querySelector(\".carousel-control.next\");\n            const skillItems = carousel.querySelectorAll(\".skill-item\");\n            if (skillsScroll && prevButton && nextButton && skillItems.length) {\n                let currentIndex = 0;\n                let autoScrollInterval = null;\n                const itemsPerView = window.innerWidth < 640 ? 1 : window.innerWidth < 1024 ? 2 : 3;\n                const maxIndex = skillItems.length - itemsPerView;\n                const updateCarousel = ()=>{\n                    skillsScroll.style.transform = `translateX(-${currentIndex * (100 / itemsPerView)}%)`;\n                };\n                const handleNavigation = (direction)=>{\n                    currentIndex = Math.max(0, Math.min(maxIndex, currentIndex + direction));\n                    updateCarousel();\n                    if (autoScrollInterval) {\n                        clearInterval(autoScrollInterval);\n                        autoScrollInterval = window.setInterval(()=>{\n                            currentIndex = currentIndex >= maxIndex ? 0 : currentIndex + 1;\n                            updateCarousel();\n                        }, 2000);\n                    }\n                };\n                carousel.addEventListener(\"mouseenter\", ()=>autoScrollInterval && clearInterval(autoScrollInterval));\n                carousel.addEventListener(\"mouseleave\", ()=>{\n                    autoScrollInterval = window.setInterval(()=>{\n                        currentIndex = currentIndex >= maxIndex ? 0 : currentIndex + 1;\n                        updateCarousel();\n                    }, 2000);\n                });\n                prevButton.addEventListener(\"click\", ()=>handleNavigation(-1));\n                nextButton.addEventListener(\"click\", ()=>handleNavigation(1));\n                window.addEventListener(\"resize\", ()=>{\n                    const newItemsPerView = window.innerWidth < 640 ? 1 : window.innerWidth < 1024 ? 2 : 3;\n                    if (newItemsPerView !== itemsPerView) {\n                        currentIndex = 0;\n                        updateCarousel();\n                    }\n                });\n                autoScrollInterval = window.setInterval(()=>{\n                    currentIndex = currentIndex >= maxIndex ? 0 : currentIndex + 1;\n                    updateCarousel();\n                }, 2000);\n            }\n        }\n    }\n}\n// Initialize the app\ndocument.addEventListener(\"DOMContentLoaded\", ()=>new $1ccc8d3c866b7484$var$PortfolioApp());\n\n\n//# sourceMappingURL=SCSS_Resume.a97d7db5.js.map\n","interface Project {\n  name: string;\n  description: string;\n  githubUrl: string;\n}\n\nclass PortfolioApp {\n  private isDarkMode: boolean = false;\n  private isMobileMenuOpen: boolean = false;\n  private projects: Project[] = [\n    {\n      name: \"Dungeon Dive\",\n      description:\n        \"This is a simple dungeon crawler game made with C programming language where the player can navigate through a randomly generated dungeon after entering their username and dungeon size.\",\n      githubUrl: \"https://github.com/0xRum/dungeon-dive\",\n    },\n    {\n      name: \"Taskii\",\n      description:\n        \"A modern and efficient task management application built with Flutter. Taskii helps you organize, prioritize, and track your tasks seamlessly, whether you're managing personal to-dos or team projects.\",\n      githubUrl:\n        \"https://github.com/vasu-patel-123/Team-HamburgerHelpers-final-Project/tree/main/taskii\",\n    },\n  ];\n\n  constructor() {\n    this.initializeApp();\n  }\n\n  private initializeApp(): void {\n    // Theme initialization\n    const prefersDark = window.matchMedia(\n      \"(prefers-color-scheme: dark)\"\n    ).matches;\n    const storedTheme =\n      localStorage.getItem(\"theme\") || (prefersDark ? \"dark\" : \"light\");\n    document.documentElement.setAttribute(\"data-theme\", storedTheme);\n\n    // Event listeners for theme toggle\n    const toggleTheme = () => {\n      const newTheme =\n        document.documentElement.getAttribute(\"data-theme\") === \"dark\"\n          ? \"light\"\n          : \"dark\";\n      document.documentElement.setAttribute(\"data-theme\", newTheme);\n      localStorage.setItem(\"theme\", newTheme);\n    };\n\n    document\n      .querySelectorAll(\".theme-toggle, .theme-toggle-mobile\")\n      .forEach((btn) => btn.addEventListener(\"click\", toggleTheme));\n\n    // Smooth scroll\n    document.querySelectorAll('a[href^=\"#\"]').forEach((anchor) =>\n      anchor.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        const target = document.querySelector(\n          (e.target as HTMLAnchorElement).getAttribute(\"href\") || \"\"\n        );\n        target?.scrollIntoView({ behavior: \"smooth\" });\n      })\n    );\n\n    // Projects loading\n    if (\n      window.location.pathname.endsWith(\"index.html\") ||\n      window.location.pathname === \"/\"\n    ) {\n      const projectsGrid = document.querySelector(\".projects-grid\");\n      if (projectsGrid) {\n        this.projects.forEach((project) => {\n          const card = document.createElement(\"div\");\n          card.className = \"project-card\";\n          card.innerHTML = `\n            <div class=\"card-header\">\n              <h3>${project.name}</h3>\n            </div>\n            <p>${project.description}</p>\n            <a href=\"${project.githubUrl}\" target=\"_blank\" rel=\"noopener noreferrer\">\n              View on GitHub\n              <i class=\"fab fa-github\"></i>\n            </a>\n          `;\n          projectsGrid.appendChild(card);\n        });\n      }\n    }\n\n    // Intersection observer for animations\n    const observer = new IntersectionObserver(\n      (entries) =>\n        entries.forEach(\n          (entry) =>\n            entry.isIntersecting && entry.target.classList.add(\"visible\")\n        ),\n      { threshold: 0.1 }\n    );\n    document\n      .querySelectorAll(\"section\")\n      .forEach((section) => observer.observe(section));\n\n    // Mobile menu\n    const mobileMenu = document.querySelector(\".mobile-menu\");\n    const menuToggle = document.querySelector(\n      \".menu-toggle\"\n    ) as HTMLButtonElement;\n    const closeMenu = document.querySelector(\".close-menu\");\n    const mobileMenuLinks = document.querySelectorAll(\".mobile-nav a\");\n\n    if (menuToggle && closeMenu && mobileMenu) {\n      const toggleMenu = (open: boolean) => {\n        this.isMobileMenuOpen = open;\n        mobileMenu.classList.toggle(\"active\", open);\n        menuToggle.style.display = open ? \"none\" : \"block\";\n        document.body.style.overflow = open ? \"hidden\" : \"\";\n      };\n\n      menuToggle.addEventListener(\"click\", () => toggleMenu(true));\n      closeMenu.addEventListener(\"click\", () => toggleMenu(false));\n      mobileMenuLinks.forEach((link) =>\n        link.addEventListener(\"click\", () => toggleMenu(false))\n      );\n    }\n\n    // Skills carousel\n    const carousel = document.querySelector(\".skills-carousel\");\n    if (carousel) {\n      const skillsScroll = carousel.querySelector(\n        \".skills-scroll\"\n      ) as HTMLElement;\n      const prevButton = carousel.querySelector(\n        \".carousel-control.prev\"\n      ) as HTMLElement;\n      const nextButton = carousel.querySelector(\n        \".carousel-control.next\"\n      ) as HTMLElement;\n      const skillItems = carousel.querySelectorAll(\".skill-item\");\n\n      if (skillsScroll && prevButton && nextButton && skillItems.length) {\n        let currentIndex = 0;\n        let autoScrollInterval: number | null = null;\n        const itemsPerView =\n          window.innerWidth < 640 ? 1 : window.innerWidth < 1024 ? 2 : 3;\n        const maxIndex = skillItems.length - itemsPerView;\n\n        const updateCarousel = () => {\n          skillsScroll.style.transform = `translateX(-${\n            currentIndex * (100 / itemsPerView)\n          }%)`;\n        };\n\n        const handleNavigation = (direction: number) => {\n          currentIndex = Math.max(\n            0,\n            Math.min(maxIndex, currentIndex + direction)\n          );\n          updateCarousel();\n          if (autoScrollInterval) {\n            clearInterval(autoScrollInterval);\n            autoScrollInterval = window.setInterval(() => {\n              currentIndex = currentIndex >= maxIndex ? 0 : currentIndex + 1;\n              updateCarousel();\n            }, 2000);\n          }\n        };\n\n        carousel.addEventListener(\n          \"mouseenter\",\n          () => autoScrollInterval && clearInterval(autoScrollInterval)\n        );\n        carousel.addEventListener(\"mouseleave\", () => {\n          autoScrollInterval = window.setInterval(() => {\n            currentIndex = currentIndex >= maxIndex ? 0 : currentIndex + 1;\n            updateCarousel();\n          }, 2000);\n        });\n\n        prevButton.addEventListener(\"click\", () => handleNavigation(-1));\n        nextButton.addEventListener(\"click\", () => handleNavigation(1));\n\n        window.addEventListener(\"resize\", () => {\n          const newItemsPerView =\n            window.innerWidth < 640 ? 1 : window.innerWidth < 1024 ? 2 : 3;\n          if (newItemsPerView !== itemsPerView) {\n            currentIndex = 0;\n            updateCarousel();\n          }\n        });\n\n        autoScrollInterval = window.setInterval(() => {\n          currentIndex = currentIndex >= maxIndex ? 0 : currentIndex + 1;\n          updateCarousel();\n        }, 2000);\n      }\n    }\n  }\n}\n\n// Initialize the app\ndocument.addEventListener(\"DOMContentLoaded\", () => new PortfolioApp());\n"],"names":["$1ccc8d3c866b7484$var$PortfolioApp","constructor","isDarkMode","isMobileMenuOpen","projects","name","description","githubUrl","initializeApp","prefersDark","window","matchMedia","matches","storedTheme","localStorage","getItem","document","documentElement","setAttribute","toggleTheme","newTheme","getAttribute","setItem","querySelectorAll","forEach","btn","addEventListener","anchor","e","preventDefault","target","querySelector","scrollIntoView","behavior","location","pathname","endsWith","projectsGrid","project","card","createElement","className","innerHTML","appendChild","observer","IntersectionObserver","entries","entry","isIntersecting","classList","add","threshold","section","observe","mobileMenu","menuToggle","closeMenu","mobileMenuLinks","toggleMenu","open","toggle","style","display","body","overflow","link","carousel","skillsScroll","prevButton","nextButton","skillItems","length","currentIndex","autoScrollInterval","itemsPerView","innerWidth","maxIndex","updateCarousel","transform","handleNavigation","direction","Math","max","min","clearInterval","setInterval"],"version":3,"file":"SCSS_Resume.a97d7db5.js.map"}